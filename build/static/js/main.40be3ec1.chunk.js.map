{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","container/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,sBAAKC,UAAY,0DAAjB,UACI,qBAAKC,IAAM,SAASC,IAAG,+BAA2BL,EAA3B,cACvB,gCACI,6BAAKC,IACL,4BAAIC,WCcLI,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEDA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACA,cAAC,EAAD,CAEAV,GAAMO,EAAOG,GAAGV,GAChBC,KAAMM,EAAOG,GAAGT,KAChBC,MAASK,EAAOG,GAAGR,OAHZK,EAAOG,GAAGV,UCIXW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKV,UAAY,MAAjB,SACE,uBACAA,UAAY,mCACZW,KAAK,SACLC,YAAY,gBACZC,SAAYH,OCCHI,G,MARA,SAACC,GACd,OACE,qBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAvE,SACGJ,EAAMK,aC4CEC,E,kDAxCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACXvB,OAAQ,GACRK,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBmB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEpB,OAAQ4B,S,oBAQ3C,WAAU,IAAD,EACuBC,KAAKN,MAA5BvB,EADA,EACAA,OAAQK,EADR,EACQA,YACTyB,EAAiB9B,EAAO+B,QAAO,SAAAC,GACnC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS7B,EAAY4B,kBAEvD,OAASjC,EAAOmC,OAGZ,sBAAKvC,UAAY,KAAjB,UACE,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWU,aAAgBuB,KAAKX,iBAChC,cAAC,EAAD,UACE,cAAC,EAAD,CAAUlB,OAAU8B,SAN1B,6C,GA1BYM,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,SAKlDX,M","file":"static/js/main.40be3ec1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 bw2 shadow-5'>\n            <img alt = 'robots' src ={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n\n\n// const Card = (props) => {\n//     const { id, name, email } = props;\n\n// const Card = (props) => {\n//     return (\n//         <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 bw2 shadow-5'>\n//             <img alt = 'robots' src ={`https://robohash.org/${props.id}?200x200`} />\n//             <div>\n//                 <h2>{props.name}</h2>\n//                 <p>{props.email}</p>\n//             </div>\n//         </div>\n//     )\n// }\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n\t\t\t\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\t\t\tkey = {robots[i].id} \n\t\t\t\t\t\t\t\t\tid = {robots[i].id} \n\t\t\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\t\t\temail = {robots[i].email}\n\t\t\t\t\t\t\t\t\t/>);\n\t\t\t\t\t\t\t})\n            }\n        </div>\n    );\n}\n\nexport default CardList;\n\n\n// Step 2.\n// const CardList = ({ robots }) => {\n//     const robotComponent = robots.map((user,i) => {\n//         return (\n//         <Card \n//         key = {robots[i].id} \n//         id = {robots[i].id} \n//         name={robots[i].name} \n//         email = {robots[i].email}\n//         />);\n//     })\n//     return (\n//         <div>\n//             {robotComponent}\n//         </div>\n\n\n// Step 1.\n\n// const CardList = ({ robots }) => {\n//     return (\n//         <div>\n//             <Card id = {robots[0].id} name={robots[0].name} email = {robots[0].email}/>\n//             <Card id = {robots[1].id} name={robots[1].name} email = {robots[1].email}/>\n//             <Card id = {robots[2].id} name={robots[2].name} email = {robots[2].email}/>\n//         </div>\n//     );\n// }","import React from 'react'\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className = 'pa2'>\n      <input \n      className = 'pa3 ba b--green bg-lightest-blue' \n      type='search' \n      placeholder='search robots'\n      onChange = {searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div style = {{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n// import { robots } from './robots'\nimport SearchBox from '../components/SearchBox'\nimport './App.css';\nimport Scroll from '../components/Scroll'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value})\n    \n  }\n\n  render() {\n    const {robots, searchfield} = this.state\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    return (!robots.length)? \n      <h1>Loading</h1>:\n      (\n        <div className = 'tc'>  \n          <h1 className = 'f1'>RoboFriends</h1>\n          <SearchBox searchChange = {this.onSearchChange}/>\n          <Scroll>\n            <CardList robots = {filteredRobots}/>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\n\n\nexport default App;\n\n// componentDidMount() {\n//   fetch('https://jsonplaceholder.typicode.com/users')\n//     .then(response=>{\n//       return response.json();})\n//     .then(users => {\n//       this.setState({ robots: users})\n//     })\n// }\n\n//1.  robots.length === 0 => !robots.length\n\n//2. \n//  if (!robots.length) {\n//   return <h1>Loading</h1>\n// } else {\n\n// final cleaning - this.state\n\n// render() {\n//   const {robots, searchfield} = this.state \n//   const filteredRobots = this.state.robots.filter(robot =>{\n//     return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n//   })\n//   if (this.state.robots.length === 0) {\n//     return <h1>Loading</h1>\n//   } else {\n//     return (\n//       <div className = 'tc'>  \n//         <h1 className = 'f1'>RoboFriends</h1>\n//         <SearchBox searchChange = {this.onSearchChange}/>\n//         <Scroll>\n//           <CardList robots = {filteredRobots}/>\n//         </Scroll>\n//       </div>\n//     )\n//   }\n// }\n// }\n\n\n\n// this.state = {\n//   robots: robots,\n//   searchfield: ''\n\n\n\n// const state = {\n//   robots: robots,\n//   searchfield: ''\n// }\n\n// <CardList robots = {robots}/>\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n// import {robots} from './robots';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}